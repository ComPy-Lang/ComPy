-- ASDL's 4 builtin types are:
-- identifier, int, string, constant

module ComPy
{
    mod = Module(stmt* body)

    stmt = FunctionDef(identifier name, arguments args,
                       stmt* body, expr* decorator_list, expr? returns)
          | Return(expr? value)
          | Assign(expr* targets, expr value)
          | AugAssign(expr target, operator op, expr value)
          | AnnAssign(expr target, expr annotation, expr? value)

          | For(expr target, expr iter, stmt* body, stmt* orelse)
          | If(expr test, stmt* body, stmt* orelse)

          | Import(alias* names)
          | ImportFrom(identifier? module, alias* names)

          | Expr(expr value)
          | Pass | Break | Continue

          -- BoolOp() can use left & right?
    expr = BoolOp(boolop op, expr* values)
         | BinOp(expr left, operator op, expr right)
         | UnaryOp(unaryop op, expr operand)
         | IfExp(expr test, expr body, expr orelse)
         | Dict(expr* keys, expr* values)
         | Set(expr* elts)
         | ListComp(expr elt, comprehension* generators)
         | SetComp(expr elt, comprehension* generators)
         | DictComp(expr key, expr value, comprehension* generators)

         | Compare(expr left, cmpop ops, expr* comparators)
         | Call(expr func, expr* args)

         | ConstantStr(string value, string? kind)
         | ConstantInt(int value, string? kind)
         | ConstantBool(bool value, string? kind)
         | ConstantFloat(float value, string? kind)
         | ConstantComplex(float re, float im, string? kind)

         | Subscript(expr value, expr slice, expr_context ctx)
         | Name(identifier id, expr_context ctx)
         | List(expr* elts, expr_context ctx)
         | Tuple(expr* elts, expr_context ctx)
         | Slice(expr? lower, expr? upper, expr? step)

    expr_context = Load | Store | Del

    boolop = And | Or

    operator = Add | Sub | Mult | Div | Mod | Pow

    unaryop = UAdd | USub | Not

    cmpop = Eq | NotEq | Lt | LtE | Gt | GtE

    comprehension = (expr target, expr iter, expr* ifs, int is_async)

    arguments = (arg* args)
    arg = (identifier arg, expr? annotation)

    alias = (identifier name, identifier? asname)

}
